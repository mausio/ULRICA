@startuml DDD_Aggregate

package "Domain Layer" {
  class CarProfile {
    -id: String
    -name: String
    -manufacturer: String
    -model: String
    -year: int
    -hasHeatPump: boolean
    -wltpRangeKm: double
    -maxDcPowerKw: double
    -maxAcPowerKw: double
    -batteryProfile: BatteryProfile
    -consumptionProfile: ConsumptionProfile
    -chargingCurve: Optional<ChargingCurve>
    +getId(): String
    +getName(): String
    +getManufacturer(): String
    +getModel(): String
    +getBatteryProfile(): BatteryProfile
    +getConsumptionProfile(): ConsumptionProfile
    +getChargingCurve(): Optional<ChargingCurve>
  }
  
  class BatteryProfile {
    -type: BatteryType
    -capacityKwh: double
    -degradationPercent: double
    -maxDcPowerKw: double
    -maxAcPowerKw: double
    +getType(): BatteryType
    +getCapacityKwh(): double
    +getDegradationPercent(): double
    +getRemainingCapacityKwh(): double
  }
  
  class ConsumptionProfile {
    -consumptionAt50Kmh: double
    -consumptionAt100Kmh: double
    -consumptionAt130Kmh: double
    +getConsumptionAt50Kmh(): double
    +getConsumptionAt100Kmh(): double
    +getConsumptionAt130Kmh(): double
    +getAverageConsumption(): double
  }
  
  class ChargingCurve {
    -curvePoints: Map<Double, Double>
    +getChargingPowerAt(socPercent: double): double
  }
  
  enum BatteryType {
    LFP
    NMC
    NCA
  }
  
  class "CarProfile.Builder" as CarProfileBuilder {
    -id: String
    -name: String
    -manufacturer: String
    -model: String
    -year: int
    -hasHeatPump: boolean
    -wltpRangeKm: double
    -maxDcPowerKw: double
    -maxAcPowerKw: double
    -batteryProfile: BatteryProfile
    -consumptionProfile: ConsumptionProfile
    -chargingCurve: Optional<ChargingCurve>
    +id(id: String): Builder
    +name(name: String): Builder
    +manufacturer(manufacturer: String): Builder
    +model(model: String): Builder
    +build(): CarProfile
  }
}

package "Application Layer" {
  interface CarProfilePersistencePortInterface {
    +findById(id: String): Optional<CarProfile>
    +findAll(): List<CarProfile>
    +save(carProfile: CarProfile): CarProfile
    +delete(id: String): void
  }
}

' Relationships
CarProfile *--> BatteryProfile : contains
CarProfile *--> ConsumptionProfile : contains
CarProfile o--> ChargingCurve : may contain
BatteryProfile --> BatteryType : uses
CarProfile <.. CarProfileBuilder : builds
CarProfilePersistencePortInterface --> CarProfile : persists

' Notes
note right of CarProfile
  Aggregate Root:
  CarProfile acts as the aggregate root
  and is the only access point for the
  contained Value Objects
end note

note right of BatteryProfile
  Value Objects:
  BatteryProfile, ConsumptionProfile,
  and ChargingCurve are Value Objects
  managed through the Aggregate Root
end note

note bottom of CarProfile
  Aggregate Invariant:
  BatteryProfile, ConsumptionProfile,
  and optional ChargingCurve must
  be consistent within a CarProfile
end note

@enduml 