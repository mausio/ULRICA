@startuml GRASP_Polymorphism

package "Domain Layer" {
  interface RangeCalculationStrategyInterface {
    +calculateRange(carProfile: CarProfile, parameters: RangeParameters): RangeResult
    +getName(): String
    +getDescription(): String
  }
  
  class WltpBasedRangeCalculationStrategy {
    +calculateRange(carProfile: CarProfile, parameters: RangeParameters): RangeResult
    +getName(): String
    +getDescription(): String
    -calculateTerrainFactor(terrain: TerrainType): double
    -calculateWeatherFactor(weather: WeatherType, temperature: double): double
    -calculateEnvironmentFactor(environment: DrivingEnvironment): double
    -generateWeatherImpactDescription(weather: WeatherType, temperature: double): String
    -generateTerrainImpactDescription(terrain: TerrainType): String
    -generateEnvironmentImpactDescription(environment: DrivingEnvironment): String
    -generateBatteryConditionDescription(soc: double, temperature: double): String
  }
  
  class ConsumptionBasedRangeCalculationStrategy {
    +calculateRange(carProfile: CarProfile, parameters: RangeParameters): RangeResult
    +getName(): String
    +getDescription(): String
    -getBaseConsumption(profile: ConsumptionProfile, environment: DrivingEnvironment): double
    -calculateTerrainFactor(terrain: TerrainType): double
    -calculateWeatherFactor(weather: WeatherType, temperature: double): double
    -generateWeatherImpactDescription(weather: WeatherType, temperature: double): String
    -generateTerrainImpactDescription(terrain: TerrainType): String
    -generateEnvironmentImpactDescription(environment: DrivingEnvironment): String
    -generateBatteryConditionDescription(soc: double, temperature: double): String
  }
  
  class RangeCalculatorService {
    -strategies: List<RangeCalculationStrategyInterface>
    -defaultStrategy: RangeCalculationStrategyInterface
    +addStrategy(strategy: RangeCalculationStrategyInterface): void
    +setDefaultStrategy(strategy: RangeCalculationStrategyInterface): void
    +getAvailableStrategies(): List<RangeCalculationStrategyInterface>
    +getDefaultStrategy(): RangeCalculationStrategyInterface
    +calculateRange(carProfile: CarProfile, parameters: RangeParameters): RangeResult
    +calculateRangeWithStrategy(carProfile: CarProfile, parameters: RangeParameters, strategy: RangeCalculationStrategyInterface): RangeResult
  }
  
  ' Domain Entities and Value Objects
  class CarProfile {
    -id: String
    -name: String
    -manufacturer: String
    -model: String
    -wltpRangeKm: double
    -batteryProfile: BatteryProfile
    -consumptionProfile: ConsumptionProfile
    -chargingCurve: Optional<ChargingCurve>
  }
  
  class RangeParameters {
    -stateOfChargePercent: double
    -temperatureCelsius: double
    -weather: WeatherType
    -terrain: TerrainType
    -environment: DrivingEnvironment
    -efficiencyMode: EfficiencyMode
  }
  
  class RangeResult {
    -estimatedRangeKm: double
    -averageConsumptionKwhPer100Km: double
    -weatherImpact: String
    -terrainImpact: String
    -environmentImpact: String
    -batteryCondition: String
  }
}

package "Application Layer" {
  class CalculateRangeInteractor {
    -rangeCalculatorService: RangeCalculatorService
    -outputPort: RangeCalculationOutputPortInterface
    -profileSelectionService: ProfileSelectionService
    +calculateRange(command: CalculateRangeCommand): void
  }
  
  interface CalculateRangeUseCaseInterface {
    +calculateRange(command: CalculateRangeCommand): void
  }
}

' Relationships
RangeCalculationStrategyInterface <|.. WltpBasedRangeCalculationStrategy
RangeCalculationStrategyInterface <|.. ConsumptionBasedRangeCalculationStrategy
RangeCalculatorService o--> "0..*" RangeCalculationStrategyInterface
RangeCalculatorService o--> "1" RangeCalculationStrategyInterface : defaultStrategy

CalculateRangeInteractor ..|> CalculateRangeUseCaseInterface
CalculateRangeInteractor --> RangeCalculatorService

' Notes
note "Polymorphism applies here:\nRangeCalculationStrategyInterface defines a contract that\nmultiple concrete strategies implement differently,\nallowing the service to work with any implementation" as N1
RangeCalculationStrategyInterface .. N1

note "RangeCalculatorService can use any strategy\nthat implements the interface without knowing\nthe specific implementation details" as N2
RangeCalculatorService .. N2

@enduml 