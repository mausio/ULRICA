@startuml Dependency Rule Examples

' Positive Example - CalculateRangeInteractor following Dependency Rule
package "PositiveExample" {
  package "Domain" {
    class CarProfile {
      -id: String
      -name: String
      -manufacturer: String
      +getId(): String
      +getName(): String
    }
    
    class RangeCalculatorService {
      -strategies: List<RangeCalculationStrategyInterface>
      -defaultStrategy: RangeCalculationStrategyInterface
      +calculateRange(profile: CarProfile, params: RangeParameters): RangeResult
    }
  }

  package "Application" {
    interface CalculateRangeUseCaseInterface {
      +calculateRange(command: CalculateRangeCommand): void
    }
    
    interface RangeCalculationOutputPortInterface {
      +displayRangeResult(result: RangeResult): void
    }
    
    class CalculateRangeInteractor {
      -rangeCalculatorService: RangeCalculatorService
      -outputPort: RangeCalculationOutputPortInterface
      -profileSelectionService: ProfileSelectionService
      +calculateRange(command: CalculateRangeCommand): void
    }
  }

  CalculateRangeInteractor ..|> CalculateRangeUseCaseInterface
  CalculateRangeInteractor --> RangeCalculatorService
  CalculateRangeInteractor --> RangeCalculationOutputPortInterface
  CalculateRangeInteractor --> CarProfile
}

' Negative Example - JsonCarProfileRepository violating Dependency Rule
package "NegativeExample" {
  package "Infrastructure" {
    class JsonCarProfileRepository {
      -STORAGE_DIR: String
      -FILE_NAME: String
      -gson: Gson
      -filePath: Path
      +findAll(): List<CarProfile>
      +save(profile: CarProfile): CarProfile
    }
    
    class "Gson" as Gson
    class "Path" as Path
    class "FileReader" as FileReader
  }
  
  package "Application" {
    interface CarProfilePersistencePortInterface {
      +findAll(): List<CarProfile>
      +save(profile: CarProfile): CarProfile
    }
  }
  
  package "Domain" {
    class "CarProfile" as CarProfile2 {
      -id: String
      -name: String
    }
  }
  
  JsonCarProfileRepository ..|> CarProfilePersistencePortInterface
  JsonCarProfileRepository --> Gson : direct dependency
  JsonCarProfileRepository --> Path : direct dependency
  JsonCarProfileRepository --> FileReader : direct dependency
  JsonCarProfileRepository --> CarProfile2
  CarProfilePersistencePortInterface --> CarProfile2
}

' Improved Version of the Negative Example
package "ImprovedSolution" {
  package "Infrastructure" {
    class "JsonCarProfileRepository" as ImprovedRepo {
      -fileStorage: FileStoragePortInterface
      -serializer: SerializationServiceInterface
      +findAll(): List<CarProfile>
      +save(profile: CarProfile): CarProfile 
    }
    
    class GsonSerializationService {
      -gson: Gson
      +serialize(object: Object): String
      +deserialize(json: String, type: Type): Object
    }
    
    class FileSystemStorageService {
      +read(path: String): String
      +write(path: String, content: String): void
    }
  }
  
  package "Application" {
    interface "CarProfilePersistencePortInterface" as ImprovedPort {
      +findAll(): List<CarProfile>
      +save(profile: CarProfile): CarProfile
    }
    
    interface FileStoragePortInterface {
      +read(path: String): String
      +write(path: String, content: String): void
    }
    
    interface SerializationServiceInterface {
      +serialize(object: Object): String
      +deserialize(json: String, type: Type): Object
    }
  }
  
  package "Domain" {
    class "CarProfile" as CarProfile3 {
      -id: String
      -name: String
    }
  }
  
  ImprovedRepo ..|> ImprovedPort
  ImprovedRepo --> FileStoragePortInterface
  ImprovedRepo --> SerializationServiceInterface
  GsonSerializationService ..|> SerializationServiceInterface
  FileSystemStorageService ..|> FileStoragePortInterface
  ImprovedPort --> CarProfile3
}

@enduml 