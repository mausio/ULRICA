@startuml OCP_Examples

' Positive Example - Strategy Pattern follows OCP
package "OCP_Positive_Example" {
  interface RangeCalculationStrategyInterface {
    +calculateRange(profile: CarProfile, params: RangeParameters): RangeResult
    +getName(): String
    +getDescription(): String
  }
  
  class WltpBasedRangeCalculationStrategy {
    +calculateRange(profile: CarProfile, params: RangeParameters): RangeResult
    +getName(): String
    +getDescription(): String
    -calculateTerrainFactor(terrain: TerrainType): double
    -calculateWeatherFactor(weather: WeatherType, temperature: double): double
  }
  
  class ConsumptionBasedRangeCalculationStrategy {
    +calculateRange(profile: CarProfile, params: RangeParameters): RangeResult
    +getName(): String
    +getDescription(): String
    -getBaseConsumption(profile: ConsumptionProfile, environment: DrivingEnvironment): double
    -calculateTerrainFactor(terrain: TerrainType): double
  }
  
  class RangeCalculatorService {
    -strategies: List<RangeCalculationStrategyInterface>
    -defaultStrategy: RangeCalculationStrategyInterface
    +addStrategy(strategy: RangeCalculationStrategyInterface): void
    +setDefaultStrategy(strategy: RangeCalculationStrategyInterface): void
    +calculateRange(profile: CarProfile, params: RangeParameters): RangeResult
  }
  
  RangeCalculationStrategyInterface <|.. WltpBasedRangeCalculationStrategy
  RangeCalculationStrategyInterface <|.. ConsumptionBasedRangeCalculationStrategy
  RangeCalculatorService o--> "0..*" RangeCalculationStrategyInterface
  
  note "OCP is satisfied here:\nRangeCalculatorService is closed for modification\nbut open for extension through new strategy implementations" as N1
  RangeCalculatorService .. N1
}

' Negative Example - Hard-coded conditional logic violates OCP
package "OCP_Negative_Example" {
  class RangeCalculator {
    +calculateRange(profile: CarProfile, calculationType: String): double
    -calculateWltpRange(profile: CarProfile): double
    -calculateConsumptionRange(profile: CarProfile): double
    -calculateRealWorldRange(profile: CarProfile): double
  }
  
  class CarProfile {
    -wltpRangeKm: double
    -batteryProfile: BatteryProfile
    -consumptionProfile: ConsumptionProfile
  }
  
  note "OCP is violated here:\nAdding a new calculation method requires\nmodifying the existing RangeCalculator class" as N2
  RangeCalculator .. N2
  RangeCalculator --> CarProfile
}

' Improved solution based on Strategy pattern to comply with OCP
package "OCP_Improved_Solution" {
  interface RangeCalculationStrategy {
    +calculateRange(profile: CarProfile): double
    +getName(): String
  }
  
  class WltpRangeCalculationStrategy {
    +calculateRange(profile: CarProfile): double
    +getName(): String
  }
  
  class ConsumptionRangeCalculationStrategy {
    +calculateRange(profile: CarProfile): double
    +getName(): String
  }
  
  class RealWorldRangeCalculationStrategy {
    +calculateRange(profile: CarProfile): double
    +getName(): String
  }
  
  class RangeCalculator {
    -strategies: Map<String, RangeCalculationStrategy>
    +registerStrategy(strategy: RangeCalculationStrategy): void
    +calculateRange(profile: CarProfile, calculationType: String): double
    +getAvailableCalculationTypes(): List<String>
  }
  
  RangeCalculationStrategy <|.. WltpRangeCalculationStrategy
  RangeCalculationStrategy <|.. ConsumptionRangeCalculationStrategy
  RangeCalculationStrategy <|.. RealWorldRangeCalculationStrategy
  RangeCalculator o--> "0..*" RangeCalculationStrategy
}

@enduml 